# Midi Minutes udev rules
DRIVER=="snd_seq_midi", ACTION=="add", ATTRS{product}=="*" DRIVERS!="snd-usb-audio" KERNELS=="[0-9]-*" SUBSYSTEMS=="usb" TAG+="systemd", ENV{SYSTEMD_WANTS}+="'midi-minutes@$name.$attr{product}.$attr{serial}.service'"

# Documentation:
#
# Put this file in /etc/udev/rules.d/
#
# This file launches a systemd template service named according to the device
# name and product name of the attached device.
#
# System template service: midi-minutes@.service
# The info expanded version:  midi-minutes@$device.$product.$serial.service
#
# The product name is escaped such that systemd can launch the service
# correctly.  The service definition unpacks the name.
#
# Detection is based on the "add" event of the ALSA seq-midi-M-N device
# generated when a MIDI controller is plugged in.  The *S matchers (ATTRS,
# DRIVERS, etc) attempt to find the appropriate parent device with the most
# relevant product attribute, which is used to fill in the $product portion of
# the systemd service name.
#
# Finding MIDI devices in /sys and /dev:
# $ find /sys /dev -iname "*mid*" -ls
#
# Assuming midi1 is the device corresponding to your MIDI controller:
#
# Determine the /sys path corresponding to a device /dev path:
# $ udevadm info -q path -n /dev/snd/midiC1D0
#
# List the device attributes and parent information for devising match lines:
# $ udevadm info -a -p /sys/bus/snd_seq/devices/seq-midi-1-0
#
# Test that the udev rule works:
# $ udevadm test /sys/bus/snd_seq/devices/seq-midi-1-0
#
# Re-process udev triggers without needing to reload the udev systemd service:
# $ sudo udevadm control --reload-rules ; sudo udevadm trigger
#
# To reload systemd files as well:
# $ sudo systemctl daemon-reload
#
# Source: https://github.com/diffusor/midi-minutes
